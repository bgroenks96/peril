/*
 * Copyright © 2011 - 2013 Aaron Mahan.
 * Copyright © 2013 - 2016 Forerunner Games, LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.json.JsonSlurper

buildscript {
  ant.get (src: "http://libgdx.badlogicgames.com/libgdx-site/service/getVersions?release=false", dest: "versions.json", ignoreerrors: "true", verbose: "on")
  def versionFile = file ("versions.json")
  def json
  if (versionFile.exists ()) {
    json = new JsonSlurper ().parseText (versionFile.text)
  } else throw new GradleException ("Unable to retrieve latest LibGDX versions, please check your internet connection.")

  ext {
    // Gradle
    gradleWrapperVersion = "3.2" // Run './gradlew wrapper' after changing.

    // Gradle plugins
    gradleVersionsPluginVersion = "0.13.0"
    gradleDependencyManagementPluginVersion = "0.6.1.RELEASE"

    // LibGDX
    libGdxVersion = json.libgdxSnapshot

    // RoboVM
    roboVMVersion = json.robovmVersion
    roboVMGradleVersion = json.robovmPluginVersion

    // Android
    androidGradleToolsVersion = "2.2.0" //json.androidGradleToolVersion
    awsAndroidSdkS3Version = "2.3.3"

    // Testing
    junitVersion = "4.12"
    testNGVersion = "6.9.13"
    hamcrestAllVersion = "1.3"
    mockitoCoreVersion = "2.2.22"

    // Logging
    slf4jVersion = "1.7.21"
    logbackVersion = "1.1.7"

    // Kryonet
    kryonetVersion = "2.22.0-RC1"
    kryoSerializersVersion = "0.41"

    // StateForge
    stateForgeStateMachineVersion = "3.6"
    stateForgeStateMachineJCodeModelVersion = "1.0.2"

    // Miscellaneous
    fgToolsVersion = "1.1.1-SNAPSHOT"
    guavaVersion = "v20.0-bugfix" // TODO Use 20.0 release when https://github.com/google/guava/issues/2152 is fixed.
    mbassadorVersion = "1.3.0"
    awsJavaSdkBomVersion = "1.11.60"
    jcommanderVersion = "1.58"
    jsr305Version = "3.0.1"
  }

  repositories {
    jcenter ()
    mavenCentral ()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  dependencies {
    classpath "com.android.tools.build:gradle:$androidGradleToolsVersion"
    classpath "com.mobidevelop.robovm:robovm-gradle-plugin:$roboVMGradleVersion"
    classpath "io.spring.gradle:dependency-management-plugin:$gradleDependencyManagementPluginVersion"
    classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
  }
}

apply plugin: "com.github.ben-manes.versions"

dependencyUpdates {
  revision "release"
}

task wrapper (type: Wrapper) {
  gradleVersion = "$gradleWrapperVersion"
}

// Apply to parent project & all subprojects.
allprojects {
  apply plugin: "eclipse"
  apply plugin: "idea"
  apply plugin: "jacoco"

  group = projectGroup
  version = projectVersion

  ext {
    jacocoInstrumentedProjects = subprojects - project (":android") - project (":integration")
  }

  repositories {
    mavenLocal ()
    jcenter ()
    mavenCentral ()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "http://oss.jfrog.org/artifactory/oss-snapshot-local/" }
    maven { url "http://dl.bintray.com/forerunnergames/repository" }

    // TODO Remove when https://github.com/google/guava/issues/2152 is fixed.
    maven { url 'https://jitpack.io' }
  }

  // Show recursive dependency tree.
  task allDeps (type: DependencyReportTask) {}
}

// Apply to all subprojects.
subprojects {
  // Allows disabling Android pre-dexing with -PdisablePreDex flag.
  // Can significantly speed up CI server builds.
  // See http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.
  project.plugins.whenPluginAdded { plugin ->
    if ("com.android.build.gradle.AppPlugin".equals (plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = !project.hasProperty ("disablePreDex")
    } else if ("com.android.build.gradle.LibraryPlugin".equals (plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = !project.hasProperty ("disablePreDex")
    }
  }

  eclipse.project.name = rootProject.name + "-" + project.name
}

// Apply to all subprojects except android.
configure (subprojects - project (":android")) {
  apply plugin: "java"

  [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  dependencies {
    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestAllVersion"
    testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
    testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
  }

  test {
    beforeTest { desc ->
      logger.quiet ("\nRunning test: " + desc)
    }

    afterTest { desc, result ->
      if (result.resultType == TestResult.ResultType.FAILURE) {
        logger.quiet ("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
        if (result.exception != null) {
          result.exception.printStackTrace ()
        }
      }
    }

    testLogging.showStandardStreams = true
  }
}

// Apply to all subprojects except android & integration.
configure (subprojects - project (":android") - project (":integration")) {
  sourceSets.main.java.srcDirs = ["src/main/java/"]
  sourceSets.main.resources.srcDirs = ["src/main/res/"]
  sourceSets.test.java.srcDirs = ["src/test/java/"]
  sourceSets.test.resources.srcDirs = ["src/test/res/"]
}

// Apply to the following subprojects: client, desktop, ios, integration
// Unfortunately, dependency resolution using the dependency management mechanism is not transitive,
// so it must be applied not only to "client", but to all subprojects that depend on "client".
// It is worth it, however, in order to achieve aws-java-sdk modularization.
configure ([project (":client"), project (":desktop"), project (":ios"), project (":integration")]) {
  apply plugin: "io.spring.dependency-management"

  dependencyManagement {
    imports {
      mavenBom "com.amazonaws:aws-java-sdk-bom:$awsJavaSdkBomVersion"
    }
  }

  dependencies {
    compile "com.amazonaws:aws-java-sdk-s3"
  }
}

project (":desktop") {
  dependencies {
    compile project (":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$libGdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-tools:$libGdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-desktop"
    compile "com.beust:jcommander:$jcommanderVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"
  }
}

project (":android") {
  apply plugin: "com.android.application"

  configurations { natives }

  dependencies {
    compile (project (":client")) {
      exclude module: "aws-java-sdk-s3"
    }
    compile "com.badlogicgames.gdx:gdx-backend-android:$libGdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-x86_64"
    compile "com.badlogicgames.gdx:gdx-freetype:$libGdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-x86_64"
    compile "org.slf4j:slf4j-android:$slf4jVersion"
    compile "com.amazonaws:aws-android-sdk-s3:$awsAndroidSdkS3Version"
  }
}

project (":ios") {
  apply plugin: "robovm"

  dependencies {
    compile project (":client")
    compile "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
    compile "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
    compile "com.badlogicgames.gdx:gdx-backend-robovm:$libGdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$libGdxVersion:natives-ios"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$libGdxVersion:natives-ios"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"
  }
}

project (":common") {
  dependencies {
    compile ("com.forerunnergames.tools:fg-tools-common:$fgToolsVersion") {
      exclude module: "guava" // TODO Remove when https://github.com/google/guava/issues/2152 is fixed.
    }
    compile ("com.forerunnergames.tools:fg-tools-net:$fgToolsVersion") {
      exclude module: "guava" // TODO Remove when https://github.com/google/guava/issues/2152 is fixed.
    }
    compile ("com.esotericsoftware:kryonet:$kryonetVersion") {
      exclude module: "kryo"
    }
    compile "de.javakaffee:kryo-serializers:$kryoSerializersVersion"
    compile "net.engio:mbassador:$mbassadorVersion"

    // TODO Remove when https://github.com/google/guava/issues/2152 is fixed.
    compile "com.forerunnergames.guava:guava:$guavaVersion"

    // TODO Uncomment when https://github.com/google/guava/issues/2152 is fixed.
    // compile "com.google.guava:guava:$guavaVersion"

    compile "com.google.code.findbugs:jsr305:$jsr305Version"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
  }
}

project (":core") {
  dependencies {
    compile project (":common")
    compile ("com.stateforge:statemachine:$stateForgeStateMachineVersion") {
      exclude module: "commons-io"
      exclude module: "junit"
    }
    testCompile project (":common").sourceSets.test.output
    testCompileOnly files { project (":common").sourceSets.test.java.srcDirs } // IDEA workaround
  }
}

project (":client") {
  dependencies {
    compile project (":common")
    compile "com.badlogicgames.gdx:gdx:$libGdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$libGdxVersion"
    testCompile project (":common").sourceSets.test.output
    testCompileOnly files { project (":common").sourceSets.test.java.srcDirs } // IDEA workaround
  }
}

project (":server") {
  dependencies {
    compile project (":core")
    compile project (":ai")
    compile "com.beust:jcommander:$jcommanderVersion"
    testCompile project (":common").sourceSets.test.output
    testCompileOnly files { project (":common").sourceSets.test.java.srcDirs } // IDEA workaround
    runtime "ch.qos.logback:logback-classic:$logbackVersion"
  }
}

project (":integration") {
  configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
  }

  dependencies {
    testCompile project (":core")
    testCompile project (":server")
    testCompile project (":client")
    testCompile ("org.testng:testng:$testNGVersion") {
      exclude module: "guava" // TODO Remove when https://github.com/google/guava/issues/2152 is fixed.
    }
  }

  test {
    useTestNG ()
  }
}

project (":ai") {
  dependencies {
    compile project (":common")
    testCompile project (":common").sourceSets.test.output
    testCompileOnly files { project (":common").sourceSets.test.java.srcDirs } // IDEA workaround
  }
}

task coverageReport (type: JacocoReport) {
  executionData fileTree (project.rootDir.absolutePath).include ("**/build/jacoco/*.exec")

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/jacoco.xml"
    html.enabled true
    html.destination "${buildDir}/reports/jacoco"
    csv.enabled false
  }

  jacocoInstrumentedProjects.each {
    sourceSets it.sourceSets.main
  }
}

coverageReport.dependsOn {
  jacocoInstrumentedProjects*.test
}

idea {
  project {
    languageLevel = "${projectSourceCompatibility}"
  }

  module {
    downloadSources = true
    downloadJavadoc = true
  }
}

tasks.eclipse.doLast {
  delete ".project"
}
