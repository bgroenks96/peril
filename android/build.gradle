/*
 * Copyright Â© 2013 - 2017 Forerunner Games, LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

android {
  buildToolsVersion "23.0.3"
  compileSdkVersion 23

  defaultConfig {
    minSdkVersion 8
    targetSdkVersion 23
    versionCode 1
    versionName "0.1-SNAPSHOT"
    multiDexEnabled true
  }

  sourceSets {
    main {
      manifest.srcFile "AndroidManifest.xml"
      java.srcDirs = ["src"]
      aidl.srcDirs = ["src"]
      renderscript.srcDirs = ["src"]
      res.srcDirs = ["res"]
      assets.srcDirs = ["assets"]
      jniLibs.srcDirs = ["libs"]
    }

    instrumentTest.setRoot ("tests")
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  lintOptions {
    disable "InvalidPackage"
  }

  dexOptions {
    javaMaxHeapSize "4g"
    preDexLibraries false
  }
}

// Called every time gradle gets executed, taking the native dependencies of
// the natives configuration, and extracting them to the proper libs / folders
// so they get packed with the APK.
task copyAndroidNatives () {
  file ("libs/armeabi/").mkdirs ()
  file ("libs/armeabi-v7a/").mkdirs ()
  file ("libs/arm64-v8a/").mkdirs ()
  file ("libs/x86_64/").mkdirs ()
  file ("libs/x86/").mkdirs ()

  configurations.natives.files.each { jar ->
    def outputDir = null
    if (jar.name.endsWith ("natives-armeabi.jar")) outputDir = file ("libs/armeabi")
    if (jar.name.endsWith ("natives-armeabi-v7a.jar")) outputDir = file ("libs/armeabi-v7a")
    if (jar.name.endsWith ("natives-arm64-v8a.jar")) outputDir = file ("libs/arm64-v8a")
    if (jar.name.endsWith ("natives-x86_64.jar")) outputDir = file ("libs/x86_64")
    if (jar.name.endsWith ("natives-x86.jar")) outputDir = file ("libs/x86")
    if (outputDir != null) {
      copy {
        from zipTree (jar)
        into outputDir
        include "*.so"
      }
    }
  }
}

task run (type: Exec) {
  def path
  def localProperties = project.file ("../local.properties")
  if (localProperties.exists ()) {
    Properties properties = new Properties ()
    localProperties.withInputStream { instr ->
      properties.load (instr)
    }
    def sdkDir = properties.getProperty ("sdk.dir")
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_HOME"
    }
  } else {
    path = "$System.env.ANDROID_HOME"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", "shell", "am", "start", "-n", "com.forerunnergames.peril.android/com.forerunnergames.peril.android.AndroidLauncher"
}

// Sets up the Android Eclipse project, using the old Ant-based build.
eclipse {
  // Need to specify Java source sets explicitly (SpringSource Gradle Eclipse plugin).
  // Ignores any nodes added in classpath.file.withXml.
  sourceSets {
    main {
      java.srcDirs "src", "gen"
    }
  }

  jdt {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
  }

  classpath {
    plusConfigurations += [project.configurations.compile]
    containers "com.android.ide.eclipse.adt.ANDROID_FRAMEWORK", "com.android.ide.eclipse.adt.LIBRARIES"
  }

  project {
    natures "com.android.ide.eclipse.adt.AndroidNature"
    buildCommands.clear ()
    buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
    buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
    buildCommand "org.eclipse.jdt.core.javabuilder"
    buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
  }
}

// Sets up the Android Idea project, using the old Ant-based build.
idea {
  module {
    sourceDirs += file ("src")
    scopes = [COMPILE: [plus: [project.configurations.compile]]]

    iml {
      withXml {
        def node = it.asNode ()
        def builder = NodeBuilder.newInstance ()
        builder.current = node
        builder.component (name: "FacetManager") {
          facet (type: "android", name: "Android") {
            configuration {
              option (name: "UPDATE_PROPERTY_FILES", value: "true")
            }
          }
        }
      }
    }
  }
}